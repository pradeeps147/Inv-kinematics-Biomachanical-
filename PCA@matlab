# Inv-kinematics-Biomachanical-
fs=1200;
addpath('C:\Users\USER\Downloads\Thesis data\g.tec')
addpath('C:\Users\USER\Downloads\Thesis data\polhemus')
polhemus_position=readmatrix('Angle_Test .txt');

% set(0, 'DefaultAxesColor' , 'white')
 position_data1 = smoothdata(polhemus_position(1:end,5:7),'gaussian',100);
 position_data2=  smoothdata(polhemus_position(1:end,8:10),'gaussian',100);
 [coeff, score, latent, tsq, explained] = pca(position_data1);
[coeff1, score1, latent, tsq, explained] = pca(position_data2);
figure,plot(score(:,1),score(:,1),'linewidth',1.5)

 subplot (3,1,1);

plot(score(:,1),score(:,2),'linewidth',1.5)
xlim([-0.6 0.6])
ylim([-0.4 0.4])
title ({'Trajectory for point-to-point octane', '  '});
ylabel ('y-coordinate (m) '); xlabel ('x-coordinate (m) '); 
pbaspect([1 1 1])
clear xlabel
clear ylabel
% 
% subplot (3,1,2);
% position_data1 = smoothdata(polhemus_position(1:end,2:4), 'gaussian',100);
% [coeff, score, latent, tsq, explained] = pca(position_data1);
% 
% plot(score(:,1),score(:,2),'linewidth',1.5)
% xlim([-0.6 0.6])
% ylim([-0.4 0.4])
% title ({'Trajectory for point-to-point circle','  '});
% xlabel ('x-coordinate (m)'); ylabel ('y-coordinate (m)');
% pbaspect([1 1 1])
% clear xlabel
% clear ylabel

% subplot (3,1,3);
% position_data1 = smoothdata(polhemus_position(1:end,2:4), 'gaussian',100);
% [coeff, score, latent, tsq, explained] = pca(position_data1);
% 
% plot(score(:,1),score(:,2),'linewidth',1.5)
% xlim([-0.6 0.6])
% ylim([-0.6 0.6])
% title({'Trajectory for point-to-point random', '  '});
% xlabel ('x-coordinate (m)');
% ylabel ('y-coordinate (m)');
% pbaspect([1 1 1])
% clear xlabel
% clear ylabel

% % Deducing x and y coordinates using direct kinematics formulae
% % x = f(theta1, theta2)
% % y = g(theta1, theta2)
% 
% l1 = 10; % length of first arm
% l2 = 7; % length of second arm
% 
% theta1 = 0:0.1:pi/2; % some first angle
% theta2 = 0:0.1:pi; % some second angle
% 
% data1 = [];
% data2 = [];
% 
% for i=1:1:length(theta1)
%     for j=1:1:length(theta2)
% 
%         x = l1 * cos(theta1(i)) + l2 * cos(theta1(i)+theta2(j)); % x coordinate
%         y = l1 * sin(theta1(i)) + l2 * sin(theta1(i)+theta2(j)); % y coordinate
%         
%         data2 = [data1; x y theta1(i)];
%         data2 = [data2; x y theta2(j)];
%        
%     end
% end


%%%%%%%%%%%%%%%%%%%%%%%%%%
% INVERSE KINEMATICS
%%%%%%%%%%%%%%%%%%%%%%%%%%

% Deducing theta1 and theta2 from x and y coordinates using inverse
% kinematics formulae 
% theta1 = f(x, y)
% theta2 = g(x, y)

l1 = 8; % length of first arm
l2 = 5; % length of second arm

% X = score(:,1);% x coordinates for validation 0:0.1:2; 
% Y = score1(:,1); % y coordinates for validation 8:0.1:10;
% X=0:0.1:2;
% Y=8:0.1:10;
X= polhemus_position(:,12:14) - (polhemus_position(:,15:17));
Y=(polhemus_position(:,18:20) - polhemus_position(:,15:17));

thetaRadian=atan2(Y),X);
degree=(180/pi).*thetaRadian;
figure,plot(degree)
% hold on, plot(thetaRadian)
theta1= acos(dot(X,Y)/(norm(X).*norm(Y)));

degree1=theta1*180/pi;
figure,
plot(degree1)
xlabel ('(sample)');
ylabel ('(degree)');
theta1D = [];
theta2D = [];
figure
xy = [];

for i = 0.1:1:length(X)
    for j= 0.1:1:length(Y)

        x = X;
        y = Y;
        c2 = (x^2 + y^2 - l1^2 - l2^2)/(2*l1*l2);
        s2 = sqrt(1 - c2^2);
        theta2 = atan2(s2,c2); % theta2 is deduced

        k1 = l1 + l2*c2;
        k2 = l2*s2;
        theta1 = atan2(y, x) - atan2(k2, k1); % theta1 is deduced

        theta1D = [theta1D; theta1]; % save theta1
        theta2D = [theta2D; theta2]; % save theta2
        
        xy = [xy; x y]; % save x-y coordinates
        
    end        
end
